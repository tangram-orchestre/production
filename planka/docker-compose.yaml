services:
  planka:
    image: ghcr.io/plankanban/planka:1.23.5
    container_name: planka
    restart: unless-stopped
    depends_on:
      planka-postgres:
        condition: service_healthy
        restart: true
      authentik-server:
        condition: service_healthy
        restart: true
      authentik-worker:
        condition: service_healthy
        restart: true
    user: 1000:1000
    networks:
      - backend
    volumes:
      - ./docker-data/user-avatars:/app/public/user-avatars
      - ./docker-data/project-background-images:/app/public/project-background-images
      - ./docker-data/attachments:/app/private/attachments
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
      - BASE_URL=https://planka.tangram-orchestre.fr
      - DATABASE_URL=postgresql://postgres@planka-postgres/planka
      - SECRET_KEY=${SECRET_KEY}

      - OIDC_ISSUER=https://auth.tangram-orchestre.fr/application/o/planka/
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID}
      - OIDC_CLIENT_SECRET=${OIDC_CLIENT_SECRET}
      - OIDC_SCOPES=openid profile email
      - OIDC_ADMIN_ROLES=bureau
      - OIDC_ENFORCED=true
      # Email Notifications (https://nodemailer.com/smtp/)
      - SMTP_HOST=smtp-relay.gmail.com
      - SMTP_PORT=465
      - SMTP_NAME=planka.tangram-orchestre.fr
      - SMTP_SECURE=true
      - SMTP_USER=${SMTP_NAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM="Tangram Planka" <${SMTP_NAME}>
    labels:
      - traefik.enable=true
      - traefik.http.routers.planka.rule=Host(`planka.tangram-orchestre.fr`)
      - traefik.http.routers.planka.tls=true
      - traefik.http.routers.planka.tls.certresolver=resolver

  planka-postgres:
    image: postgres:14-alpine
    container_name: planka-postgres
    restart: unless-stopped
    volumes:
      - ./docker-data/db:/var/lib/postgresql/data
    user: 1000:1000
    networks:
      - backend
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
      - POSTGRES_DB=planka
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d planka" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  backend:
    external: true
